+*In[ ]:*+
[source, ipython3]
----
1. Write a Python program to reverse a string without using any built-in string reversal functions.

----


+*In[1]:*+
[source, ipython3]
----
def reverse_string(s):
    reversed_str = ""
    for char in s:
        reversed_str = char + reversed_str
    return reversed_str

# Example usage
s = "Hello, World!"
reversed_s = reverse_string(s)
print(reversed_s)
----


+*Out[1]:*+
----
!dlroW ,olleH
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
2. Implement a function to check if a given string is a palindrome.
----


+*In[2]:*+
[source, ipython3]
----
def is_palindrome(s):
    reversed_s = reverse_string(s)
    return s == reversed_s

# Example usage
s = "madam"
is_palindrome = is_palindrome(s)
print(is_palindrome)
----


+*Out[2]:*+
----
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
3. Write a program to find the largest element in a given list.

----


+*In[3]:*+
[source, ipython3]
----
def find_largest_element(lst):
    largest = lst[0]
    for num in lst:
        if num > largest:
            largest = num
    return largest

# Example usage
lst = [4, 2, 9, 6, 5]
largest_num = find_largest_element(lst)
print(largest_num)
----


+*Out[3]:*+
----
9
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
4. Implement a function to count the occurrence of each element in a list.

----


+*In[4]:*+
[source, ipython3]
----
from collections import defaultdict

def count_occurrences(lst):
    occurrence_count = defaultdict(int)
    for num in lst:
        occurrence_count[num] += 1
    return occurrence_count

# Example usage
lst = [1, 2, 1, 3, 2, 1, 4]
occurrence_count = count_occurrences(lst)
print(occurrence_count)
----


+*Out[4]:*+
----
defaultdict(<class 'int'>, {1: 3, 2: 2, 3: 1, 4: 1})
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
5. Write a Python program to find the second largest number in a list.
----


+*In[5]:*+
[source, ipython3]
----
def find_second_largest(lst):
    largest = float('-inf')
    second_largest = float('-inf')
    for num in lst:
        if num > largest:
            second_largest = largest
            largest = num
        elif num > second_largest and num != largest:
            second_largest = num
    return second_largest

# Example usage
lst = [5, 3, 8, 2, 9, 1]
second_largest = find_second_largest(lst)
print(second_largest)
----


+*Out[5]:*+
----
8
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
6. Implement a function to remove duplicate elements from a list
----


+*In[6]:*+
[source, ipython3]
----
def remove_duplicates(lst):
    unique_list = []
    for num in lst:
        if num not in unique_list:
            unique_list.append(num)
    return unique_list

# Example usage
lst = [1, 2, 1, 3, 2, 4, 3]
unique_lst = remove_duplicates(lst)
print(unique_lst)
----


+*Out[6]:*+
----
[1, 2, 3, 4]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
7. Write a program to calculate the factorial of a given number.
----


+*In[7]:*+
[source, ipython3]
----
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

# Example usage
n = 5
fact = factorial(n)
print(fact)
----


+*Out[7]:*+
----
120
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
8. Implement a function to check if a given number is prime.
----


+*In[8]:*+
[source, ipython3]
----
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# Example usage
n = 17
is_prime_num = is_prime(n)
print(is_prime_num)
----


+*Out[8]:*+
----
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
9. Write a Python program to sort a list of integers in ascending order.

----


+*In[9]:*+
[source, ipython3]
----
def sort_list(lst):
    sorted_lst = sorted(lst)
    return sorted_lst

# Example usage
lst = [4, 2, 9, 6, 5]
sorted_lst = sort_list(lst)
print(sorted_lst)
----


+*Out[9]:*+
----
[2, 4, 5, 6, 9]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
10. Implement a function to find the sum of all numbers in a list.

----


+*In[10]:*+
[source, ipython3]
----
def find_sum(lst):
    total = sum(lst)
    return total

# Example usage
lst = [1, 2, 3, 4, 5]
sum_of_nums = find_sum(lst)
print(sum_of_nums)
----


+*Out[10]:*+
----
15
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
11. Write a program to find the common elements between two lists.

----


+*In[11]:*+
[source, ipython3]
----
def find_common_elements(list1, list2):
    set1 = set(list1)
    set2 = set(list2)
    common_elements = set1.intersection(set2)
    return list(common_elements)

# Example usage
list1 = [1, 2, 3, 4, 5]
list2 = [4, 5, 6, 7, 8]
common_elements = find_common_elements(list1, list2)
print(common_elements)
----


+*Out[11]:*+
----
[4, 5]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
12. Implement a function to check if a given string is an anagram of another string.

----


+*In[12]:*+
[source, ipython3]
----
def is_anagram(str1, str2):
    sorted_str1 = sorted(str1)
    sorted_str2 = sorted(str2)
    return sorted_str1 == sorted_str2

# Example usage
str1 = "listen"
str2 = "silent"
is_anagram_str = is_anagram(str1, str2)
print(is_anagram_str)
----


+*Out[12]:*+
----
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
13. Write a Python program to generate all permutations of a given string.

----


+*In[13]:*+
[source, ipython3]
----
from itertools import permutations

def generate_permutations(s):
    perms = [''.join(p) for p in permutations(s)]
    return perms

# Example usage
s = "abc"
permutations = generate_permutations(s)
print(permutations)
----


+*Out[13]:*+
----
['abc', 'acb', 'bac', 'bca', 'cab', 'cba']
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
14. Implement a function to calculate the Fibonacci sequence up to a given number of terms.

----


+*In[14]:*+
[source, ipython3]
----
def fibonacci_sequence(n):
    sequence = [0, 1]
    while len(sequence) < n:
        next_num = sequence[-1] + sequence[-2]
        sequence.append(next_num)
    return sequence

# Example usage
n = 8
fibonacci_seq = fibonacci_sequence(n)
print(fibonacci_seq)
----


+*Out[14]:*+
----
[0, 1, 1, 2, 3, 5, 8, 13]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
15. Write a program to find the median of a list of numbers.

----


+*In[15]:*+
[source, ipython3]
----
def find_median(lst):
    sorted_lst = sorted(lst)
    n = len(sorted_lst)
    if n % 2 == 0:
        median = (sorted_lst[n//2 - 1] + sorted_lst[n//2]) / 2
    else:
        median = sorted_lst[n//2]
    return median

# Example usage
lst = [4, 2, 9, 6, 5]
median = find_median(lst)
print(median)
----


+*Out[15]:*+
----
5
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
16. Implement a function to check if a given list is sorted in non-decreasing order.

----


+*In[16]:*+
[source, ipython3]
----
def is_sorted(lst):
    n = len(lst)
    for i in range(n-1):
        if lst[i] > lst[i+1]:
            return False
    return True

# Example usage
lst = [1, 2, 3, 4, 5]
is_sorted_lst = is_sorted(lst)
print(is_sorted_lst)
----


+*Out[16]:*+
----
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
17. Write a Python program to find the intersection of two lists.

----


+*In[17]:*+
[source, ipython3]
----
def find_intersection(list1, list2):
    set1 = set(list1)
    set2 = set(list2)
    intersection = set1.intersection(set2)
    return list(intersection)

# Example usage
list1 = [1, 2, 3, 4, 5]
list2 = [4, 5, 6, 7, 8]
intersection = find_intersection(list1, list2)
print(intersection)
----


+*Out[17]:*+
----
[4, 5]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
18. Implement a function to find the maximum subarray sum in a given list.

----


+*In[18]:*+
[source, ipython3]
----
def find_max_subarray_sum(lst):
    max_sum = float('-inf')
    current_sum = 0
    for num in lst:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    return max_sum

# Example usage
lst = [1, -3, 2, 1, -1]
max_subarray_sum = find_max_subarray_sum(lst)
print(max_subarray_sum)
----


+*Out[18]:*+
----
3
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
19. Write a program to remove all vowels from a given string.

----


+*In[19]:*+
[source, ipython3]
----
def remove_vowels(s):
    vowels = 'aeiouAEIOU'
    s_without_vowels = ''
    for char in s:
        if char not in vowels:
            s_without_vowels += char
    return s_without_vowels

# Example usage
s = "Hello, World!"
s_without_vowels = remove_vowels(s)
print(s_without_vowels)
----


+*Out[19]:*+
----
Hll, Wrld!
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
20. Implement a function to reverse the order of words in a given sentence.

----


+*In[ ]:*+
[source, ipython3]
----
def reverse_words(sentence):
    words = sentence.split()
    reversed_words = ' '.join(reversed(words))
    return reversed_words

# Example usage
sentence = "Hello, world!"
reversed_sentence = reverse_words(sentence)
print(reversed_sentence)

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
21. Write a Python program to check if two strings are anagrams of each other.

----


+*In[20]:*+
[source, ipython3]
----
def are_anagrams(str1, str2):
    sorted_str1 = sorted(str1)
    sorted_str2 = sorted(str2)
    return sorted_str1 == sorted_str2

# Example usage
str1 = "listen"
str2 = "silent"
are_anagrams_str = are_anagrams(str1, str2)
print(are_anagrams_str)
----


+*Out[20]:*+
----
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
22. Implement a function to find the first non-repeating character in a string.

----


+*In[21]:*+
[source, ipython3]
----
def find_first_non_repeating_char(s):
    char_count = {}
    for char in s:
        char_count[char] = char_count.get(char, 0) + 1
    for char in s:
        if char_count[char] == 1:
            return char
    return None

# Example usage
s = "aabccde"
first_non_repeating_char = find_first_non_repeating_char(s)
print(first_non_repeating_char)
----


+*Out[21]:*+
----
b
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
23. Write a program to find the prime factors of a given number.

----


+*In[22]:*+
[source, ipython3]
----
import math

def find_prime_factors(num):
    factors = []
    while num % 2 == 0:
        factors.append(2)
        num //= 2
    for i in range(3, int(math.sqrt(num)) + 1, 2):
        while num % i == 0:
            factors.append(i)
            num //= i
    if num > 2:
        factors.append(num)
    return factors

# Example usage
num = 36
prime_factors = find_prime_factors(num)
print(prime_factors)
----


+*Out[22]:*+
----
[2, 2, 3, 3]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
24. Implement a function to check if a given number is a power of two.

----


+*In[23]:*+
[source, ipython3]
----
def is_power_of_two(n):
    if n <= 0:
        return False
    return (n & (n - 1)) == 0

# Example usage
n = 16
is_power_of_two_num = is_power_of_two(n)
print(is_power_of_two_num)
----


+*Out[23]:*+
----
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
25. Write a Python program to merge two sorted lists into a single sorted list.
----


+*In[24]:*+
[source, ipython3]
----
import heapq

def merge_sorted_lists(lst1, lst2):
    merged_list = list(heapq.merge(lst1, lst2))
    return merged_list

# Example usage
lst1 = [1, 3, 5, 7]
lst2 = [2, 4, 6, 8]
merged_list = merge_sorted_lists(lst1, lst2)
print(merged_list)
----


+*Out[24]:*+
----
[1, 2, 3, 4, 5, 6, 7, 8]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
26. Implement a function to find the mode of a list of numbers.

----


+*In[25]:*+
[source, ipython3]
----
import statistics

def find_mode(lst):
    mode = statistics.mode(lst)
    return mode

# Example usage
lst = [1, 2, 3, 2, 4, 2, 5]
mode = find_mode(lst)
print(mode)
----


+*Out[25]:*+
----
2
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
27. Write a program to find the greatest common divisor (GCD) of two numbers.

----


+*In[26]:*+
[source, ipython3]
----
import math

def find_gcd(a, b):
    gcd = math.gcd(a, b)
    return gcd

# Example usage
a = 24
b = 36
gcd = find_gcd(a, b)
print(gcd)
----


+*Out[26]:*+
----
12
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
28. Implement a function to calculate the square root of a given number.

----


+*In[27]:*+
[source, ipython3]
----
import math

def calculate_square_root(n):
    square_root = math.sqrt(n)
    return square_root

# Example usage
n = 25
square_root = calculate_square_root(n)
print(square_root)
----


+*Out[27]:*+
----
5.0
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
29. Write a Python program to check if a given string is a valid palindrome ignoring non-alphanumeric characters.

----


+*In[28]:*+
[source, ipython3]
----
def is_valid_palindrome(s):
    i = 0
    j = len(s) - 1
    while i < j:
        while i < j and not s[i].isalnum():
            i += 1
        while i < j and not s[j].isalnum():
            j -= 1
        if s[i].lower() != s[j].lower():
            return False
        i += 1
        j -= 1
    return True

# Example usage
s = "A man, a plan, a canal: Panama"
is_valid_palindrome_str = is_valid_palindrome(s)
print(is_valid_palindrome_str)
----


+*Out[28]:*+
----
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
30. Implement a function to find the minimum element in a rotated sorted list.

----


+*In[29]:*+
[source, ipython3]
----
def find_min_element_rotated_sorted(lst):
    left = 0
    right = len(lst) - 1
    while left < right:
        mid = (left + right) // 2
        if lst[mid] > lst[right]:
            left = mid + 1
        else:
            right = mid
    return lst[left]

# Example usage
lst = [4, 5, 6, 7, 0, 1, 2]
min_element = find_min_element_rotated_sorted(lst)
print(min_element)
----


+*Out[29]:*+
----
0
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
31. Write a program to find the sum of all even numbers in a list.

----


+*In[30]:*+
[source, ipython3]
----
def sum_even_numbers(lst):
    sum_even = 0
    for num in lst:
        if num % 2 == 0:
            sum_even += num
    return sum_even

# Example usage
lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
sum_even = sum_even_numbers(lst)
print(sum_even)
----


+*Out[30]:*+
----
30
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
32. Implement a function to calculate the power of a number using recursion.

----


+*In[31]:*+
[source, ipython3]
----
def power(base, exponent):
    if exponent == 0:
        return 1
    else:
        return base * power(base, exponent - 1)

# Example usage
base = 2
exponent = 3
result = power(base, exponent)
print(result)
----


+*Out[31]:*+
----
8
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
33. Write a Python program to remove duplicates from a list while preserving the order.

----


+*In[32]:*+
[source, ipython3]
----
def remove_duplicates(lst):
    unique_lst = []
    seen = set()
    for num in lst:
        if num not in seen:
            unique_lst.append(num)
            seen.add(num)
    return unique_lst

# Example usage
lst = [1, 2, 3, 2, 4, 3, 5]
unique_lst = remove_duplicates(lst)
print(unique_lst)
----


+*Out[32]:*+
----
[1, 2, 3, 4, 5]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
34. Implement a function to find the longest common prefix among a list of strings.

----


+*In[33]:*+
[source, ipython3]
----
def longest_common_prefix(strs):
    if not strs:
        return ""
    min_len = min(len(s) for s in strs)
    prefix = ""
    for i in range(min_len):
        if all(s[i] == strs[0][i] for s in strs):
            prefix += strs[0][i]
        else:
            break
    return prefix

# Example usage
strs = ["flower", "flow", "flight"]
common_prefix = longest_common_prefix(strs)
print(common_prefix)
----


+*Out[33]:*+
----
fl
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
35. Write a program to check if a given number is a perfect square.

----


+*In[34]:*+
[source, ipython3]
----
import math

def is_perfect_square(num):
    sqrt = math.sqrt(num)
    return sqrt.is_integer()

# Example usage
num = 16
is_perfect_square_num = is_perfect_square(num)
print(is_perfect_square_num)
----


+*Out[34]:*+
----
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
36. Implement a function to calculate the product of all elements in a list.

----


+*In[35]:*+
[source, ipython3]
----
def calculate_product(lst):
    product = 1
    for num in lst:
        product *= num
    return product

# Example usage
lst = [1, 2, 3, 4, 5]
product = calculate_product(lst)
print(product)
----


+*Out[35]:*+
----
120
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
37. Write a Python program to reverse the order of words in a sentence while preserving the word order.

----


+*In[37]:*+
[source, ipython3]
----
def reverse_words(sentence):
    words = sentence.split()
    reversed_words = words[::-1]
    reversed_sentence = " ".join(reversed_words)
    return reversed_sentence

# Example usage
sentence = "Hello, world!"
reversed_sentence = reverse_words(sentence)
print(reversed_sentence)
----


+*Out[37]:*+
----
world! Hello,
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
38. Implement a function to find the missing number in a given list of consecutive numbers.

----


+*In[38]:*+
[source, ipython3]
----
def find_missing_number(lst):
    n = len(lst) + 1
    expected_sum = (n * (n + 1)) // 2
    actual_sum = sum(lst)
    missing_number = expected_sum - actual_sum
    return missing_number

# Example usage
lst = [1, 2, 3, 5, 6, 7, 8]
missing_number = find_missing_number(lst)
print(missing_number)
----


+*Out[38]:*+
----
4
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
39. Write a program to find the sum of digits of a given number.

----


+*In[39]:*+
[source, ipython3]
----
def sum_digits(number):
    digits = [int(digit) for digit in str(number)]
    sum_of_digits = sum(digits)
    return sum_of_digits

# Example usage
number = 12345
sum_of_digits = sum_digits(number)
print(sum_of_digits)
----


+*Out[39]:*+
----
15
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
40. Implement a function to check if a given string is a valid palindrome considering case sensitivity.

----


+*In[40]:*+
[source, ipython3]
----
def is_palindrome(string):
    return string == string[::-1]

# Example usage
string = "radar"
is_palindrome_string = is_palindrome(string)
print(is_palindrome_string)
----


+*Out[40]:*+
----
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
41. Write a Python program to find the smallest missing positive integer in a list.

----


+*In[41]:*+
[source, ipython3]
----
def find_smallest_missing_positive(lst):
    positive_set = set()
    for num in lst:
        if num > 0:
            positive_set.add(num)
    smallest_missing = 1
    while smallest_missing in positive_set:
        smallest_missing += 1
    return smallest_missing

# Example usage
lst = [-1, 2, 3, 5, 6]
smallest_missing = find_smallest_missing_positive(lst)
print(smallest_missing)
----


+*Out[41]:*+
----
1
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
42. Implement a function to find the longest palindrome substring in a given string.

----


+*In[42]:*+
[source, ipython3]
----
def longest_palindrome_substring(string):
    if len(string) < 2:
        return string
    longest_palindrome = ""
    for i in range(len(string)):
        # Check odd-length palindromes
        odd_palindrome = expand_around_center(string, i, i)
        if len(odd_palindrome) > len(longest_palindrome):
            longest_palindrome = odd_palindrome
        # Check even-length palindromes
        even_palindrome = expand_around_center(string, i, i + 1)
        if len(even_palindrome) > len(longest_palindrome):
            longest_palindrome = even_palindrome
    return longest_palindrome

def expand_around_center(string, left, right):
    while left >= 0 and right < len(string) and string[left] == string[right]:
        left -= 1
        right += 1
    return string[left + 1:right]

# Example usage
string = "babad"
longest_palindrome = longest_palindrome_substring(string)
print(longest_palindrome)
----


+*Out[42]:*+
----
bab
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
43. Write a program to find the number of occurrences of a given element in a list.

----


+*In[43]:*+
[source, ipython3]
----
def count_occurrences(lst, element):
    count = 0
    for item in lst:
        if item == element:
            count += 1
    return count

# Example usage
lst = [1, 2, 3, 2, 4, 2, 5]
element = 2
occurrences = count_occurrences(lst, element)
print(occurrences)
----


+*Out[43]:*+
----
3
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
44. Implement a function to check if a given number is a perfect number.

----


+*In[44]:*+
[source, ipython3]
----
def is_perfect_number(number):
    if number <= 0:
        return False
    divisor_sum = sum(i for i in range(1, number) if number % i == 0)
    return divisor_sum == number

# Example usage
number = 28
is_perfect = is_perfect_number(number)
print(is_perfect)
----


+*Out[44]:*+
----
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
45. Write a Python program to remove all duplicates from a string.

----


+*In[45]:*+
[source, ipython3]
----
def remove_duplicates(string):
    unique_chars = set(string)
    new_string = "".join(unique_chars)
    return new_string

# Example usage
string = "hello"
new_string = remove_duplicates(string)
print(new_string)
----


+*Out[45]:*+
----
eloh
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
46. Implement a function to find the first missing positive


----


+*In[46]:*+
[source, ipython3]
----
def find_first_missing_positive(lst):
    i = 1
    while i in lst:
        i += 1
    return i

# Example usage
lst = [1, 3, 4, 7, 9]
first_missing = find_first_missing_positive(lst)
print(first_missing)
----


+*Out[46]:*+
----
2
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----
